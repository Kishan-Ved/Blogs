{"title":"Matrix Transformations","markdown":{"yaml":{"title":"Matrix Transformations","authors":"Kishan Ved","description":"Understanding matrix multiplication as transformation and interpretation of low rank matrices","date":"07/20/2023","draft":false,"categories":["ML","Math","Coding"]},"headingText":"Matrix Multiplication as Transformation and Interpretation of Low Rank Matrices","containsRefs":false,"markdown":"\n\n\n\n### Matrix multiplication as transformation\n\nWhen a vector is multiplied by a suitable matrix, the operation essentially transforms the original vector into a new vector. This can be illustrated by the following example. The dimension of the resultant vector may also change (though it does not in this example).\n\n#### Necessary imports:\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nimport seaborn as sns\nfrom sympy import Eq,Matrix,MatMul\n```\n#### Creating a vector and a transformation matrix\n\n```python\nA = np.array([[2,1],[1,4]])\nx = np.array([1,1])\nAx = A @ x\nEq(Matrix(Ax),MatMul(Matrix(A),Matrix(x)),evaluate=False)\n```\n\n![](img2.png)\n\n#### A function to plot arrows\n\n```python\ndef plot_arrow(ax,v,color,label):\n    arrow = mpatches.FancyArrowPatch((0,0),(v[0],v[1]),mutation_scale=9,color=color,label=label)\n    ax.add_patch(arrow)\n    ax.legend(bbox_to_anchor=(1.6,1),borderaxespad=0)\n```\n#### A function to compute the transformed vector\n\n```python\ndef plot_transform(A,x):\n  Ax = A @ x\n  fig, ax = plt.subplots()\n  plot_arrow(ax,x,\"k\",f\"Original Vector x: {x}\")\n  plot_arrow(ax,Ax,\"g\",f\"Transformed vector Ax: {Ax}\")\n  plt.xlim((-5,5))\n  plt.ylim((-5,5))\n  plt.grid(alpha=0.1)\n  ax.set_aspect(\"equal\")\n```\n\n#### Using the above functions\n\n```python\nplot_transform(np.array([[2.0,1.0],[1.0,4.0]]),np.array([1.0,1.0]))\n```\n\n![](img1.png)\n\n### Using matrix transformation to rotate a vector\n\n#### Defining the required function\n\n```python\ndef plot_rot(theta,v):\n  c = np.cos(theta)\n  s = np.sin(theta)\n  rot_mat = np.array([[c,-s],[s,c]])\n  w = rot_mat @ v\n  fig, ax = plt.subplots()\n  plot_arrow(ax,v,\"k\",f\"Original vector: {v}\")\n  plot_arrow(ax,w,\"g\",f\"Vector on rotation: {w}\")\n  plt.xlim((-6,6))\n  plt.ylim((-6,6))\n  plt.grid(alpha=0.4)\n  ax.set_aspect(\"equal\")\n```\n\n#### Using the function to rotate [3.0  5.0] by 60 degrees anti-clockwise\n\n```python\nplot_rot(np.pi/3,np.array([3.0,5.0]))\n```\n![](img3.png)\n\n### Matrix multiplication as transformation\n\nRank of a matrix is the minimum number of linearly independent rows and columns or the number of non-zero eigenvalues in case of a square matrix.\n\nConsider the low rank matrix:\n![](img4.png)\n\nDefining the function: \n\n```python\ndef plot_lr(v,slope):\n  A1 = np.array([1.0, 2.0])\n  A = np.vstack((A1,slope*A1)) # The low rank matrix\n  x = np.arange(-6,6,0.01)\n  y = slope*x\n  plot_transform(A,v)\n  plt.plot(x,y,lw=5,alpha=0.4,label=f\"y = {slope}x, Column Space of A\")\n  plt.legend(bbox_to_anchor=(1,1),borderaxespad=0)\n```\n\nLets transform the vector [1.0  2.0] using the above transformation matrix:\n\n```python\nplot_lr(np.array([1.0, 2.0]),4)\nplt.tight_layout()\n```\n\n![](img5.png)\n\n### Importance of rowspace, columnspace and nullspace in low rank matrix transformations\n\n```python\nA = np.array([[1.0,2.0],[4.0,8.0]])\nprint(\"The transformation matrix involved is :\")\nMatrix(A)\n```\n![](img6.png)\n\n```python\nprint(\"The rowspace of this matrix is spanned by : \")\nMatrix(np.array([1.0,2.0]))\n```\n![](img7.png)\n\n```python\nprint(\"The nullspace of a matrix is always perpendicular to the rowspace.\")\nprint(\"The nullspace of matrix A is spaned by : \")\nMatrix(np.array([-2.0,1.0]))\n```\n![](img8.png)\n\n```python\nprint(\"Any vector in the nullspace is converted to a zero matrix after transformation.\")\nplot_lr(np.array([2.0,-1.0]),4)\nplt.plot(x,-0.5*x,lw=5,alpha=0.4,label=f\"y = {-0.5}x, Nullspace of A\",color=\"g\")\nx = np.arange(-6,6,0.01)\nplt.legend(bbox_to_anchor=(1,1), borderaxespad=0)\nplt.tight_layout()\n```\n![](img9.png)\n\nConsider the vector v = [1.0, 1.0] and the same low rank transformation matrix as above.\n\nThe matrix obtained on transformation is:\n![](img10.png)\n\nThe projection of v along the rowspace of A is:\n\nStep 1: Finding the projection matrix:\n```python\nr = np.array([1.0, 2.0])\nproj = np.outer(r,r)\nproj = proj / np.inner(r,r)\nMatrix(proj)\n```\nThe projection matrix is:\n![](img11.png)\n\nStep 2: Finding the projection of v along the rowspace of A\n```pyhton\nb = np.array([1.0,1.0])\nv = proj @ b\nMatrix(v)\n```\n![](img12.png)\n\nThe matrix obtained on transformation of this projection vector is:\n```python\nAv = A @ v\nEq(MatMul(Matrix(A),Matrix(v)),Matrix(Av),evaluate=False)\n```\n\n![](img13.png)\n\nWe notice that this is the same as the matrix obtained before.\n\nLearnings:\n\n1. Any vector can be written as the vector sum of the projection on the rowspace and projection perpendicular to the rowspace (ie; in the nullspace). \nOnly the component along the rowspace gets transformed to a non-zero matrix, the transformation of the component in the nullspace is always a zero matrix.\n\n2. Analogy to PCA: As all vectors after transformation lie in the column space of A, this can be thought of as dimensionality reduction where there is a change in dimension from the initial vector space to the dimension of the column space of the transformation matrix\n\n<!-- To learn more about Quarto websites visit <https://quarto.org/docs/websites>. -->","srcMarkdownNoYaml":"\n\n\n## Matrix Multiplication as Transformation and Interpretation of Low Rank Matrices\n\n### Matrix multiplication as transformation\n\nWhen a vector is multiplied by a suitable matrix, the operation essentially transforms the original vector into a new vector. This can be illustrated by the following example. The dimension of the resultant vector may also change (though it does not in this example).\n\n#### Necessary imports:\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nimport seaborn as sns\nfrom sympy import Eq,Matrix,MatMul\n```\n#### Creating a vector and a transformation matrix\n\n```python\nA = np.array([[2,1],[1,4]])\nx = np.array([1,1])\nAx = A @ x\nEq(Matrix(Ax),MatMul(Matrix(A),Matrix(x)),evaluate=False)\n```\n\n![](img2.png)\n\n#### A function to plot arrows\n\n```python\ndef plot_arrow(ax,v,color,label):\n    arrow = mpatches.FancyArrowPatch((0,0),(v[0],v[1]),mutation_scale=9,color=color,label=label)\n    ax.add_patch(arrow)\n    ax.legend(bbox_to_anchor=(1.6,1),borderaxespad=0)\n```\n#### A function to compute the transformed vector\n\n```python\ndef plot_transform(A,x):\n  Ax = A @ x\n  fig, ax = plt.subplots()\n  plot_arrow(ax,x,\"k\",f\"Original Vector x: {x}\")\n  plot_arrow(ax,Ax,\"g\",f\"Transformed vector Ax: {Ax}\")\n  plt.xlim((-5,5))\n  plt.ylim((-5,5))\n  plt.grid(alpha=0.1)\n  ax.set_aspect(\"equal\")\n```\n\n#### Using the above functions\n\n```python\nplot_transform(np.array([[2.0,1.0],[1.0,4.0]]),np.array([1.0,1.0]))\n```\n\n![](img1.png)\n\n### Using matrix transformation to rotate a vector\n\n#### Defining the required function\n\n```python\ndef plot_rot(theta,v):\n  c = np.cos(theta)\n  s = np.sin(theta)\n  rot_mat = np.array([[c,-s],[s,c]])\n  w = rot_mat @ v\n  fig, ax = plt.subplots()\n  plot_arrow(ax,v,\"k\",f\"Original vector: {v}\")\n  plot_arrow(ax,w,\"g\",f\"Vector on rotation: {w}\")\n  plt.xlim((-6,6))\n  plt.ylim((-6,6))\n  plt.grid(alpha=0.4)\n  ax.set_aspect(\"equal\")\n```\n\n#### Using the function to rotate [3.0  5.0] by 60 degrees anti-clockwise\n\n```python\nplot_rot(np.pi/3,np.array([3.0,5.0]))\n```\n![](img3.png)\n\n### Matrix multiplication as transformation\n\nRank of a matrix is the minimum number of linearly independent rows and columns or the number of non-zero eigenvalues in case of a square matrix.\n\nConsider the low rank matrix:\n![](img4.png)\n\nDefining the function: \n\n```python\ndef plot_lr(v,slope):\n  A1 = np.array([1.0, 2.0])\n  A = np.vstack((A1,slope*A1)) # The low rank matrix\n  x = np.arange(-6,6,0.01)\n  y = slope*x\n  plot_transform(A,v)\n  plt.plot(x,y,lw=5,alpha=0.4,label=f\"y = {slope}x, Column Space of A\")\n  plt.legend(bbox_to_anchor=(1,1),borderaxespad=0)\n```\n\nLets transform the vector [1.0  2.0] using the above transformation matrix:\n\n```python\nplot_lr(np.array([1.0, 2.0]),4)\nplt.tight_layout()\n```\n\n![](img5.png)\n\n### Importance of rowspace, columnspace and nullspace in low rank matrix transformations\n\n```python\nA = np.array([[1.0,2.0],[4.0,8.0]])\nprint(\"The transformation matrix involved is :\")\nMatrix(A)\n```\n![](img6.png)\n\n```python\nprint(\"The rowspace of this matrix is spanned by : \")\nMatrix(np.array([1.0,2.0]))\n```\n![](img7.png)\n\n```python\nprint(\"The nullspace of a matrix is always perpendicular to the rowspace.\")\nprint(\"The nullspace of matrix A is spaned by : \")\nMatrix(np.array([-2.0,1.0]))\n```\n![](img8.png)\n\n```python\nprint(\"Any vector in the nullspace is converted to a zero matrix after transformation.\")\nplot_lr(np.array([2.0,-1.0]),4)\nplt.plot(x,-0.5*x,lw=5,alpha=0.4,label=f\"y = {-0.5}x, Nullspace of A\",color=\"g\")\nx = np.arange(-6,6,0.01)\nplt.legend(bbox_to_anchor=(1,1), borderaxespad=0)\nplt.tight_layout()\n```\n![](img9.png)\n\nConsider the vector v = [1.0, 1.0] and the same low rank transformation matrix as above.\n\nThe matrix obtained on transformation is:\n![](img10.png)\n\nThe projection of v along the rowspace of A is:\n\nStep 1: Finding the projection matrix:\n```python\nr = np.array([1.0, 2.0])\nproj = np.outer(r,r)\nproj = proj / np.inner(r,r)\nMatrix(proj)\n```\nThe projection matrix is:\n![](img11.png)\n\nStep 2: Finding the projection of v along the rowspace of A\n```pyhton\nb = np.array([1.0,1.0])\nv = proj @ b\nMatrix(v)\n```\n![](img12.png)\n\nThe matrix obtained on transformation of this projection vector is:\n```python\nAv = A @ v\nEq(MatMul(Matrix(A),Matrix(v)),Matrix(Av),evaluate=False)\n```\n\n![](img13.png)\n\nWe notice that this is the same as the matrix obtained before.\n\nLearnings:\n\n1. Any vector can be written as the vector sum of the projection on the rowspace and projection perpendicular to the rowspace (ie; in the nullspace). \nOnly the component along the rowspace gets transformed to a non-zero matrix, the transformation of the component in the nullspace is always a zero matrix.\n\n2. Analogy to PCA: As all vectors after transformation lie in the column space of A, this can be thought of as dimensionality reduction where there is a change in dimension from the initial vector space to the dimension of the column space of the transformation matrix\n\n<!-- To learn more about Quarto websites visit <https://quarto.org/docs/websites>. -->"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"cosmo","title-block-banner":true,"title":"Matrix Transformations","authors":"Kishan Ved","description":"Understanding matrix multiplication as transformation and interpretation of low rank matrices","date":"07/20/2023","draft":false,"categories":["ML","Math","Coding"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}